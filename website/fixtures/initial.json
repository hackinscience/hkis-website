[{"model": "website.user", "pk": 1, "fields": {"password": "pbkdf2_sha256$216000$d8vDvKPIBj8U$zrtH42tUcnPALZkuVUFNXDR/dwmxsqF7RPSrkK0SQHQ=", "last_login": "2020-12-04T12:21:34.181Z", "is_superuser": true, "username": "mdk", "first_name": "", "last_name": "", "email": "julien@palard.fr", "is_staff": true, "is_active": true, "date_joined": "2020-12-04T12:20:46.277Z", "points": 0.0, "rank": null, "groups": [], "user_permissions": []}}, {"model": "website.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$216000$AjLgTNgKLucA$YkQW++OFihbJakgBjr4PJ2XmElN0S4zBYBYuXXx/b/8=", "last_login": null, "is_superuser": false, "username": "Lisa", "first_name": "", "last_name": "", "email": "", "is_staff": false, "is_active": true, "date_joined": "2020-12-04T12:24:09.471Z", "points": 0.0, "rank": null, "groups": [], "user_permissions": []}}, {"model": "website.exercise", "pk": 1, "fields": {"title": "Hello World", "title_en": "Hello World", "title_fr": "Hello World", "author": 2, "slug": "hello-world", "pre_check": "# AUTO GENERATED: DO NOT EDIT.\r\nfrom pathlib import Path\r\nimport base64\r\nimport lzma\r\nfrom subprocess import run\r\n\r\npo = base64.b64decode(b'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')\r\npo = lzma.decompress(po)\r\nLC_MESSAGES = Path(\".\") / \"fr\" / \"LC_MESSAGES\"\r\nLC_MESSAGES.mkdir(parents=True, exist_ok=True)\r\n(LC_MESSAGES / \"check.po\").write_bytes(po)\r\nrun([\"msgfmt\", str(LC_MESSAGES / \"check.po\"), \"--output-file\", str(LC_MESSAGES / \"check.mo\")])", "check": "from pathlib import Path\nimport gettext\nfrom correction_helper import code, fail, run, exclude_file_from_traceback\n\nexclude_file_from_traceback(__file__)\n_ = gettext.translation(\"check\", Path(__file__).parent, fallback=True).gettext\n\n\ndef check():\n    with open(\"solution.py\") as f:\n        solution = \"\\n\".join(\n            line for line in f.read().lower().split(\"\\n\") if not line.startswith(\"#\")\n        )\n    if not solution:\n        fail(\n            _(\n                \"\"\"You wrote no code (in the black area, which is a code editor).\n\nYou should write a line of code which prints `Hello world!` when\nexecuted, if you really don't know how to start, you should first read\nthe [tutorial](https://docs.python.org/3/tutorial/).\"\"\"\n            )\n        )\n    if solution.strip().replace(\"!\", \"\") == \"print(hello world)\":\n        fail(\n            _(\n                \"\"\"\"Hello world!\" is a string, in Python strings should be enclosed\n in quotes or double quotes.\nSee the [strings tutorial](\nhttps://docs.python.org/3/tutorial/introduction.html#strings)\"\"\"\n            )\n        )\n    output = run(\"solution.py\")\n    clean_output = output.lower().replace(\",\", \"\").replace(\"!\", \"\")\n    if clean_output == \"hello world\":\n        exit(0)\n    if \"print\" not in solution and \"hello\" in solution:\n        fail(\n            _(\n                \"\"\"You're not in an\n[interactive Python interpreter](\nhttps://docs.python.org/3/tutorial/interpreter.html#interactive-mode),\nyour code is tested in a file,\nso there is no implicit print here.\n\nYou have to use the [print](https://docs.python.org/3/library/functions.html#print)\nfunction.\"\"\"\n            )\n        )\n    message = _(\n        'You should print \"Hello World!\", not something else to validate this exercise.'\n    )\n\n    if not output:\n        fail(message + \"\\n\\n\" + _(\"You printed nothing :(\"))\n    else:\n        fail(f\"{message}\\n\\n\" + _(\"You printed:\") + f\"\\n\\n{code(output)}\")\n\n\nif __name__ == \"__main__\":\n    check()", "is_published": true, "solution": "print(\"Hello world!\")", "wording": "Write a single line of Python code to display the \"Hello world!\" string.\r\n\r\nWrite this line in the black editor, right here → then click the `Run`\r\nbutton to see how it goes, and finally the `Submit` button to submit\r\nyour answer to Hackinscience's correction bot.\r\n\r\nThe bot will review your code and test it, if all goes right you'll\r\nhave a nice green message, if something goes bad the bot will explain\r\nthe best it can.\r\n\r\nOnce your exercise is good, read the shared solutions, it's always\r\ninteresting, then click the `→` button to try another exercise.\r\n\r\n\r\n## Advice\r\n\r\nYou'll need a [string](https://docs.python.org/3/tutorial/introduction.html#strings)\r\nand the [`print()`](https://docs.python.org/3/library/functions.html#print)\r\nbuiltin function.\r\n\r\n\r\n## Evaluation\r\n\r\nThe correction bot will test your program and expect to see \"Hello world!\" (does not care about capitalisation, for this one).", "wording_en": "Write a single line of Python code to display the \"Hello world!\" string.\r\n\r\nWrite this line in the black editor, right here → then click the `Run`\r\nbutton to see how it goes, and finally the `Submit` button to submit\r\nyour answer to Hackinscience's correction bot.\r\n\r\nThe bot will review your code and test it, if all goes right you'll\r\nhave a nice green message, if something goes bad the bot will explain\r\nthe best it can.\r\n\r\nOnce your exercise is good, read the shared solutions, it's always\r\ninteresting, then click the `→` button to try another exercise.\r\n\r\n\r\n## Advice\r\n\r\nYou'll need a [string](https://docs.python.org/3/tutorial/introduction.html#strings)\r\nand the [`print()`](https://docs.python.org/3/library/functions.html#print)\r\nbuiltin function.\r\n\r\n\r\n## Evaluation\r\n\r\nThe correction bot will test your program and expect to see \"Hello world!\" (does not care about capitalisation, for this one).", "wording_fr": "Écrivez une ligne de code qui affiche \"Hello world!\" lorsqu'elle est exécutée.\r\n\r\nÉcrivez cette ligne dans l'éditeur de code (noir), là à droite →\r\n\r\nEnsuite, cliquez sur `Exécuter` si vous vouez voir ce que votre code\r\nfait une fois exécuté par Python.\r\n\r\nPuis finalement cliquez sur `Envoyer` pour envoyer votre code à la\r\nmoulinette de correction. La moulinette relira et testera votre code,\r\npuis vous indiquera si vous avez réussi, ou ce que vous devez améliorer.\r\n\r\nLorsque votre exercice est bon, vous pouvez lire les solutions\r\npartagées (le bouton du milieu), puis cliquez sur le bouton `→`\r\npermettant de passer à l'exercice suivant, devenu bleu pour\r\nl'occasion.\r\n\r\n\r\n## Conseils\r\n\r\nVous aurez besoin d'une [chaîne de caractères](https://docs.python.org/fr/3/tutorial/introduction.html#strings)\r\net de la fonction native [`print()`](https://docs.python.org/fr/3/library/functions.html#print).\r\n\r\nN'hésitez pas à cliquer sur le bouton gris \"Exécuter\", il ne fait\r\nqu'exécuter votre code et vous afficher le résultat (à droite), comme\r\nsi vous éditiez un fichier Python sur votre machine, ça vous permet\r\nd'expérimenter, autant que vous voulez.", "initial_solution": "", "position": 1.0}}, {"model": "website.exercise", "pk": 2, "fields": {"title": "Print 42", "title_en": "Print 42", "title_fr": "Afficher 42", "author": 2, "slug": "print-42", "pre_check": "# AUTO GENERATED: DO NOT EDIT.\r\nfrom pathlib import Path\r\nimport base64\r\nimport lzma\r\nfrom subprocess import run\r\n\r\npo = base64.b64decode(b'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')\r\npo = lzma.decompress(po)\r\nLC_MESSAGES = Path(\".\") / \"fr\" / \"LC_MESSAGES\"\r\nLC_MESSAGES.mkdir(parents=True, exist_ok=True)\r\n(LC_MESSAGES / \"check.po\").write_bytes(po)\r\nrun([\"msgfmt\", str(LC_MESSAGES / \"check.po\"), \"--output-file\", str(LC_MESSAGES / \"check.mo\")])", "check": "from pathlib import Path\nfrom correction_helper import code, fail, run, exclude_file_from_traceback\n\nexclude_file_from_traceback(__file__)\n\n\ndef check():\n    output = run(\"solution.py\")\n    if output == \"42\":\n        exit(0)\n    solution = Path(\"solution.py\").read_text()\n    if any(quote in solution for quote in ('\"', \"'\")):\n        fail(\n            \"\"\"If you're using quotes, it's not an integer, it's a string.\nprint will render it the same way, but the exercise is here to make you use numbers.\"\"\"\n        )\n    if \"print\" not in solution and \"42\" in solution:\n        fail(\n            \"\"\"You're not in Python interpreter,\nthere is no implicit print here,\nyou have to call the `print` function.\"\"\"\n        )\n    if not output:\n        fail(\n            \"\"\"Your code printed nothing, did you forgot to call the\n[print](https://docs.python.org/3/library/functions.html#print) function?\"\"\"\n        )\n    fail(\"Drzzzt: wrong, I need a 42!\\n\\n\" + code(output))\n\n\nif __name__ == \"__main__\":\n    check()", "is_published": true, "solution": "print(42)", "wording": "Write a single line of code displaying the number 42.\r\n\r\n\r\n## Advice\r\n\r\nYou'll need a [number](https://docs.python.org/3/tutorial/introduction.html#numbers)\r\nand the [`print()`](https://docs.python.org/3.4/library/functions.html#print) builtin function.\r\n\r\nI'm not asking to print the string \"42\", (composed of two chars), but the number 42.", "wording_en": "Write a single line of code displaying the number 42.\r\n\r\n\r\n## Advice\r\n\r\nYou'll need a [number](https://docs.python.org/3/tutorial/introduction.html#numbers)\r\nand the [`print()`](https://docs.python.org/3.4/library/functions.html#print) builtin function.\r\n\r\nI'm not asking to print the string \"42\", (composed of two chars), but the number 42.", "wording_fr": "Écrivez une seule ligne de code affichant le nombre `42`.\r\n\r\n## Conseils\r\n\r\nVous aurez besoin d'un\r\n[nombre](https://docs.python.org/3/tutorial/introduction.html#numbers)\r\net de la fonction native\r\n[`print()`](https://docs.python.org/3.4/library/functions.html#print).\r\n\r\nAttention, on ne vous demande pas d'afficher la [chaîne de\r\ncaractères](https://docs.python.org/3/tutorial/introduction.html#strings)\r\n`\"42\"`, composée de deux caractères, mais bien le nombre 42, vous\r\nn'aurez donc pas besoin de guillemets dans cet exercice.\r\n\r\nN'hésitez pas à cliquer sur le bouton gris \"Exécuter\", il ne fait\r\nqu'exécuter votre code et vous afficher le résultat (à droite), comme\r\nsi vous éditiez un fichier Python sur votre machine, ça vous permet\r\nd'expérimenter.\r\n\r\nDès que le résultat vous convient, vous pouvez utiliser le bouton bleu\r\n« Envoi pour validation » pour proposer votre code à la moulinette de\r\ncorrection.", "initial_solution": "", "position": 2.0}}, {"model": "admin.logentry", "pk": 1, "fields": {"action_time": "2020-12-04T12:23:51.086Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Hello World", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 2, "fields": {"action_time": "2020-12-04T12:24:09.623Z", "user": 1, "content_type": 1, "object_id": "2", "object_repr": "Lisa", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}, {"model": "admin.logentry", "pk": 3, "fields": {"action_time": "2020-12-04T12:24:18.854Z", "user": 1, "content_type": 3, "object_id": "1", "object_repr": "Hello World", "action_flag": 2, "change_message": "[{\"changed\": {\"fields\": [\"Author\", \"Check\"]}}]"}}, {"model": "admin.logentry", "pk": 4, "fields": {"action_time": "2020-12-04T12:25:27.900Z", "user": 1, "content_type": 3, "object_id": "2", "object_repr": "Print 42", "action_flag": 1, "change_message": "[{\"added\": {}}]"}}]